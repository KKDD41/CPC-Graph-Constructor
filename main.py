# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'garph.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPainter
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np


class Window(QMainWindow):
    vector_of_segments = []
    alphabet = "abcdefghijklmnopqrstuvwxyz"

    def __init__(self):
        super(Window, self).__init__()
        self.setWindowTitle("CPC-Graphs constructor")
        self.resize(800, 600)
        self.x = 100
        self.y = 100

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(560, 10, 231, 291))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)

        self.textEdit = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(9, 9, 541, 561))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.pushButton_4.setText("Create Chain")
        self.pushButton_2.setText("Read Chain")
        self.pushButton.setText("Create Graph")
        self.pushButton_3.setText("Show Cordinates")

        self.pushButton.clicked.connect(self.create_graph)
        self.pushButton_2.clicked.connect(self.read_chain)
        self.pushButton_3.clicked.connect(self.show_coordinates)
        self.pushButton_4.clicked.connect(self.create_chain)

        self.drawing_mode = False
        self.show_coordinates_flag = False
        self.read_chain_flag = False

        self.show()
        self.setMouseTracking(True)

    def paintEvent(self, e):
        painter = QPainter()
        painter.begin(self)
        if len(self.vector_of_segments) != 0:
            for i in range(len(self.vector_of_segments) - 1):
                painter.drawLine(self.vector_of_segments[i + 1][0], self.vector_of_segments[i + 1][1],
                                 self.vector_of_segments[i][0], self.vector_of_segments[i][1])
                painter.drawText((self.vector_of_segments[i][0] + self.vector_of_segments[i + 1][0]) // 2,
                                 (self.vector_of_segments[i][1] + self.vector_of_segments[i + 1][1]) // 2,
                                 self.alphabet[i])
            painter.drawLine(self.x, self.y, self.vector_of_segments[-1][0], self.vector_of_segments[-1][1])
            painter.drawText((self.x + self.vector_of_segments[-1][0]) // 2,
                             (self.y + self.vector_of_segments[-1][1]) // 2,
                             self.alphabet[len(self.vector_of_segments) - 1])
        if self.show_coordinates_flag:
            for i in range(len(self.vector_of_segments)):
                painter.drawText(560, 320 + 25 * i,
                                 f"""{self.alphabet[i % len(self.vector_of_segments)]} : {self.vector_of_segments[i % len(self.vector_of_segments)]}, {self.vector_of_segments[(i + 1) % len(self.vector_of_segments)]};""")
        painter.end()

    def mouseMoveEvent(self, event):
        self.x = event.x()
        self.y = event.y()
        self.update()

    def mousePressEvent(self, event: QMouseEvent):
        if self.drawing_mode:
            self.vector_of_segments.append((self.x, self.y))
            if abs(self.vector_of_segments[0][0] - event.x()) > 5 or abs(self.vector_of_segments[0][1] - event.y()) > 5:
                self.x = event.x()
                self.y = event.y()
            else:
                self.x = self.vector_of_segments[0][0]
                self.y = self.vector_of_segments[0][1]
                self.drawing_mode = False
            self.update()

    def create_graph(self):
        graph = nx.Graph()
        n = len(self.vector_of_segments)
        for i in range(n - 1):
            for j in range(i + 1, n):
                A = np.array([[self.vector_of_segments[i][1] - self.vector_of_segments[i + 1][1],
                               self.vector_of_segments[i + 1][0] - self.vector_of_segments[i][0]],
                              [self.vector_of_segments[j][1] - self.vector_of_segments[(j + 1) % n][1],
                               self.vector_of_segments[(j + 1) % n][0] - self.vector_of_segments[j][0]]])
                b = np.array([self.vector_of_segments[i + 1][0] * self.vector_of_segments[i][1] -
                              self.vector_of_segments[i][0] * self.vector_of_segments[i + 1][1],
                              self.vector_of_segments[(j + 1) % n][0] * self.vector_of_segments[j][1] -
                              self.vector_of_segments[j][0] * self.vector_of_segments[(j + 1) % n][1]])
                x = np.linalg.solve(A, b)[0]
                if (min(self.vector_of_segments[i][0], self.vector_of_segments[i + 1][0]) < x < max(
                        self.vector_of_segments[i][0], self.vector_of_segments[i + 1][0])) and (min(
                        self.vector_of_segments[j][0], self.vector_of_segments[(j + 1) % n][0]) < x < max(
                        self.vector_of_segments[j][0], self.vector_of_segments[(j + 1) % n][0])):
                    graph.add_edge(self.alphabet[i], self.alphabet[j])
        nx.draw(graph, with_labels=True)
        plt.savefig("graph_1.png")
        dlg = QDialog(self)
        dlg.setWindowTitle("CPC-Graph to current realization")
        dlg.resize(600, 600)
        labelImage = QLabel(dlg)
        pixmap = QPixmap("graph_1.png")
        labelImage.setPixmap(pixmap)
        dlg.exec()

    def create_chain(self):
        self.drawing_mode = True

    def show_coordinates(self):
        self.show_coordinates_flag = True
        self.update()

    def read_chain(self):
        self.read_chain_flag = True
        string_with_coordinates = self.textEdit.toPlainText().split('\n')
        self.vector_of_segments = list(
            tuple(map(int, string_with_coordinates[i].split())) for i in range(len(string_with_coordinates)))
        self.update()


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
